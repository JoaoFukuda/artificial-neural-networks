package Model.Components;

import java.util.HashMap;
import java.util.List;
import java.util.Random;

public class Perceptron {

    //Bias output is always 1
    private final Float biasOutput = 1F;
    private Float inputSignal;
    private Float outputSignal;

    private Float biasWeight;
    private Float deltaBias;
    private HashMap<Perceptron, Float> inputPerceptronsWeightsMap;
    private HashMap<Perceptron, Float> deltaWeights;

    private Layer layer;
    private Float error;

    public Perceptron(List<Perceptron> inputPerceptrons, Layer layer) {
        this.layer = layer;
        this.inputPerceptronsWeightsMap = new HashMap<>();
        this.deltaWeights = new HashMap<>();

        Random r = new Random();

        //For each input perceptron a random weight is generated
        for (Perceptron perceptron : inputPerceptrons) {
            Float random = r.nextFloat() - 0.5F;

            //The input perceptron and its respective weight is stored on a map
            this.inputPerceptronsWeightsMap.put(perceptron, random);
        }

        //The bias weight also starts as a random value
        this.biasWeight = r.nextFloat();
    }

    //This method is used to calculate the output signal generated by the perceptron
    //based on the outpout of the input perceptrons and their weights
    public void calculateOutput() {

        //The input signal starts as the bias weight multiplied by its signal
        this.inputSignal = this.biasWeight * this.biasOutput;

        //Then, the input signal receives the output signals of all its input perceptrons
        //multiplied by their weights
        for (Perceptron perceptron : inputPerceptronsWeightsMap.keySet()) {
            Float weight = inputPerceptronsWeightsMap.get(perceptron);
            this.inputSignal += perceptron.getOutputSignal() * weight;
        }

        //Finally, the input signal is used on the activation function to generate the output signal
        this.outputSignal = this.layer.getFunction().activate(this.inputSignal);
    }

    //This method calculates the delta weights for each input perceptron
    //based on their output signal and the error and alpha received
    public void calculateDeltaWeights(Float error, Float alpha) {
        this.error = error;

        for (Perceptron perceptron : inputPerceptronsWeightsMap.keySet()) {
            Float deltaWeight = alpha * error * perceptron.getOutputSignal();

            //A map is populated containing the input perceptrons and their delta weights
            this.deltaWeights.put(perceptron, deltaWeight);
        }

        this.deltaBias = alpha * error * 1;
    }

    //This method update the weights by getting each input perceptrons,
    //then summing its current weight with its delta weight
    public void updateWeights() {
        for (Perceptron perceptron :  inputPerceptronsWeightsMap.keySet()) {
            Float currentWeight = inputPerceptronsWeightsMap.get(perceptron);
            Float deltaWeight = deltaWeights.get(perceptron);
            this.inputPerceptronsWeightsMap.put(perceptron, currentWeight + deltaWeight);
        }

        //The new bias weight is also calculated by summing its current value with the delta
        this.biasWeight = this.biasWeight + this.deltaBias;
    }

    public Float getInputSignal() {
        return this.inputSignal;
    }

    public Float getOutputSignal() {
        return this.outputSignal;
    }

    public void setOutputSignal(Float signal) {
        this.outputSignal = signal;
    }

    public HashMap<Perceptron, Float> getWeights() {
        return this.inputPerceptronsWeightsMap;
    }

    public Float getError() {
        return this.error;
    }

    public Float getBiasWeight() {
        return this.biasWeight;
    }
}
